<?php
declare(strict_types=1);

namespace Tests\Postgres;

use Fyre\Cache\CacheManager;
use Fyre\Cache\Cacher;
use Fyre\Cache\Handlers\FileCacher;
use Fyre\DB\Connection;
use Fyre\DB\ConnectionManager;
use Fyre\DB\Handlers\Postgres\PostgresConnection;
use Fyre\DB\TypeParser;
use Fyre\FileSystem\Folder;
use Fyre\Schema\Schema;
use Fyre\Schema\SchemaRegistry;

use function getenv;

trait PostgresConnectionTrait
{
    protected Cacher $cache;

    protected Connection $db;

    protected Schema $schema;

    protected function setUp(): void
    {
        $typeParser = new TypeParser();

        $this->db = (new ConnectionManager($typeParser))->build([
            'className' => PostgresConnection::class,
            'host' => getenv('POSTGRES_HOST'),
            'username' => getenv('POSTGRES_USERNAME'),
            'password' => getenv('POSTGRES_PASSWORD'),
            'database' => getenv('POSTGRES_DATABASE'),
            'port' => getenv('POSTGRES_PORT'),
            'charset' => 'utf8',
            'persist' => true,
        ]);

        $this->cache = (new CacheManager())->build([
            'className' => FileCacher::class,
            'path' => 'tmp',
            'prefix' => 'schema.',
            'expire' => 3600,
        ]);

        $this->schema = (new SchemaRegistry($this->cache))->use($this->db);

        $this->db->query('DROP TABLE IF EXISTS test_values');
        $this->db->query('DROP TABLE IF EXISTS test');

        $this->db->query(<<<'EOT'
            CREATE TABLE test (
                id INTEGER GENERATED BY DEFAULT AS IDENTITY,
                name CHARACTER VARYING(255) NULL DEFAULT NULL,
                value DOUBLE PRECISION NOT NULL DEFAULT 5,
                price NUMERIC(10,2) NOT NULL DEFAULT 2.50,
                text CHARACTER VARYING(255) NOT NULL DEFAULT 'default',
                bool BOOLEAN NOT NULL DEFAULT FALSE,
                date_precision TIMESTAMP(0) NULL DEFAULT NULL,
                created TIMESTAMP WITHOUT TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
                modified TIMESTAMP WITHOUT TIME ZONE NULL DEFAULT CURRENT_TIMESTAMP,
                PRIMARY KEY (id)
            )
        EOT);
        $this->db->query(<<<'EOT'
            CREATE UNIQUE INDEX name ON test (name)
        EOT);
        $this->db->query(<<<'EOT'
            CREATE INDEX name_value ON test (name, value)
        EOT);
        $this->db->query(<<<'EOT'
            CREATE TABLE test_values (
                id INTEGER GENERATED BY DEFAULT AS IDENTITY,
                test_id INTEGER NOT NULL DEFAULT '0',
                value INTEGER NOT NULL,
                PRIMARY KEY (id)
            )
        EOT);
        $this->db->query(<<<'EOT'
            CREATE INDEX test_values_test_id ON test_values (test_id)
        EOT);
        $this->db->query(<<<'EOT'
            CREATE INDEX value ON test_values (value)
        EOT);
        $this->db->query(<<<'EOT'
            ALTER TABLE test_values ADD CONSTRAINT test_values_test_id FOREIGN KEY (test_id) REFERENCES public.test (id) ON UPDATE CASCADE ON DELETE CASCADE
        EOT);
    }

    protected function tearDown(): void
    {
        $folder = new Folder('tmp');

        if ($folder->exists()) {
            $folder->delete();
        }

        $this->db->query('DROP TABLE IF EXISTS test_values');
        $this->db->query('DROP TABLE IF EXISTS test');
    }
}
